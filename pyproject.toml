[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "localpass"
version = "1.0.0"
description = "A secure, minimalist CLI password manager following Unix philosophy"
readme = "README.md"
requires-python = ">=3.13"
license = {text = "MIT"}
authors = [
    {name = "LocalPass Team", email = "team@localpass.dev"},
]
keywords = ["password", "manager", "cli", "security", "encryption"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Security",
    "Topic :: Utilities",
]

dependencies = [
    "typer[all]>=0.12.0",
    "rich>=13.7.0",
    "cryptography>=41.0.0",
    "pyperclip>=1.8.2",
    "argon2-cffi>=23.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
]

[project.scripts]
localpass = "src.cli.main:app"

[project.urls]
Homepage = "https://github.com/localpass/localpass"
Documentation = "https://localpass.readthedocs.io"
Repository = "https://github.com/localpass/localpass.git"
Issues = "https://github.com/localpass/localpass/issues"

[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src"]

# Ruff configuration for linting
[tool.ruff]
target-version = "py313"
line-length = 100

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit security
]
ignore = [
    "S101",  # Use of assert (OK in tests)
    "S603",  # subprocess without shell=True (OK for our use case)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["S101", "S105", "S106"]  # Allow assert and hardcoded passwords in tests

# Black configuration for formatting
[tool.black]
target-version = ['py313']
line-length = 100
skip-string-normalization = true

# MyPy configuration for type checking
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "contract: marks tests as contract tests",
    "security: marks tests as security tests",
]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "black>=25.1.0",
    "mypy>=1.18.1",
    "pre-commit>=4.3.0",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=7.0.0",
    "pytest-mock>=3.15.0",
    "ruff>=0.13.0",
]
